import asyncpg.exceptions
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import logging
from loader import dp, db
from states.admin import AdminState
from keyboards.default import admin


@dp.message_handler(text='–ö–æ–º–ø—å—é—Ç–µ—Ä—ã', state=AdminState.categories)
async def open_computers(message: types.Message):
    await AdminState.computers.set()
    await message.answer(text='–ù–∞—á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤', reply_markup=admin.markup_computers)


@dp.message_handler(text='–°–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤', state=AdminState.computers)
async def get_pc_list(message: types.Message):
    try:
        pc_count = await db.count_computers()

        pc_list = InlineKeyboardMarkup(row_width=5)
        btn_prev = InlineKeyboardButton(text='‚óÄÔ∏è', callback_data='prev')
        btn_next = InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data='next')
        btn_clean = InlineKeyboardButton(text='üßπ', callback_data='clean')
        btn_accept = InlineKeyboardButton(text='üëå', callback_data='accept')

        for pc in range(pc_count):
            pc_list.insert(InlineKeyboardButton(text=str(pc + 1), callback_data=str(pc)))

        await message.answer(text='–°–ø–∏—Å–æ–∫ –ø–∫', reply_markup=pc_list)
    except asyncpg.exceptions.UndefinedTableError as err:
        await message.answer(
            '–û—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É\n'
            '–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /start'
        )
        logging.exception(err)


@dp.message_handler(text='–û—á–∏—Å—Ç–∏—Ç—å', state=AdminState.computers)
async def cleanpc(message: types.Message):
    try:
        await db.clean_pc_list()
        await message.answer('–¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω–∞')
    except asyncpg.exceptions.UndefinedTableError as err:
        await message.answer(
            '–û—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É\n'
            '–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /start'
        )
        logging.exception(err)


@dp.message_handler(text=['/dropusers', '–£–¥–∞–ª–∏—Ç—å'], state=AdminState.computers)
async def droppc(message: types.Message):
    await AdminState.pc_choice.set()

    btn_yes = KeyboardButton(text='–î–∞')
    btn_no = KeyboardButton(text='–ù–µ—Ç')
    markup_choice = ReplyKeyboardMarkup(
        resize_keyboard=True, row_width=1
    ).add(btn_yes, btn_no)

    await message.reply(
        text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤?',
        reply_markup=markup_choice
    )


@dp.message_handler(text=['–î–∞', '–ù–µ—Ç'], state=AdminState.pc_choice)
async def delete_table_computers(message: types.Message):
    if message.text == '–î–∞':
        await db.drop_computers()
        await message.answer(
            text='–¢–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            reply_markup=admin.markup_computers
        )
    else:
        await message.answer(text='–û—Ç–∫–∞—Ç', reply_markup=admin.markup_computers)
    await AdminState.computers.set()


@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –ø–∫', state=AdminState.computers)
async def ask_for_price(message: types.Message):
    await AdminState.add_pc.set()
    await message.answer(
        text='–ù–∞–∑–Ω–∞—á—å—Ç–µ —Ü–µ–Ω—É\n'
             '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (6–∫)',
        reply_markup=admin.deny_default
    )


@dp.message_handler(text='–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é', state=AdminState.add_pc)
async def add_pc_default(message: types.Message):
    await db.add_pc(6000)
    await AdminState.computers.set()
    await message.answer(
        text='–ù–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
        reply_markup=admin.markup_computers
    )


@dp.message_handler(state=AdminState.add_pc)
async def add_pc(message: types.Message):
    try:
        price = int(message.text)
        await db.add_pc(price)
        await AdminState.computers.set()
        await message.answer(
            text='–ù–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
            reply_markup=admin.markup_computers
        )
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ!')


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –ø–∫', state=AdminState.computers)
async def ask_for_pc_id(message: types.Message):
    await AdminState.delete_pc.set()
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∫', reply_markup=admin.markup_deny)


@dp.message_handler(state=AdminState.delete_pc)
async def delete_pc(message: types.Message):
    try:
        pc_id = int(message.text)
        await db.remove_pc(pc_id)
        await AdminState.computers.set()
        await message.answer(
            text='–ö–æ–º–ø—å—é—Ç–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –±–æ–ª—å—à–µ –Ω–µ—Ç',
            reply_markup=admin.markup_computers
        )
    except Exception as err:
        if isinstance(err, ValueError):
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        else:
            await message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n'
                '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏')
            logging.exception(err)
